#!/usr/bin/env ruby
#
# DITA for Small Teams
#
# Post-receive server-side git hook
# to update D4ST Link Management database
# with any changes as a result of updates
# to the repository.
#--------------------------------------------
#
# In the context of the docker containers the network details
# are invariant.

# For use in container, value should be "linkmgr".
$BaseXHost="linkmgr"

require_relative "./BaseXClient"

# The grit package appears to be a nice
# git client but don't really need it
# for what we're doing here.
#require 'rubygems'
#require 'grit'

class Updater
  def initialize(from, to, branch, repoName)
     @from = from
     # Get the magic hash for empty directories:
     if @from =~ /^000000/
        @from = `git hash-object -t tree --stdin < /dev/null`
        @from.chomp!
     end
     @to = to
     @branch = branch
     @repoName = repoName
     @basex = BaseXClient::Session.new($BaseXHost, 1984, "admin", "admin")
  end

  def cleanBranchName(branch)
    # Trim off leading ref/heads:
    branch.sub!("refs/heads/", "")
    branch.tr('/.', '~_')
  end

  def getDatabaseNameForBranch(branch)
      dbName="d4st^#{@repoName}^#{cleanBranchName(branch)}"
  end

  def getMetadataDatabaseNameForBranch(branch)
      dbName="_d4st^metadata^#{@repoName}^#{cleanBranchName(branch)}"
  end

  def ensureMetadataDatabase
      cmd="check #{getMetadataDatabaseNameForBranch(@branch)}"
      @basex.execute(cmd)

      rescue RuntimeError
        puts "[WARN] Runtime error doing BaseX command \"#{cmd}\""

  end

  def dbExists(dbname)
      result = @basex.execute("open #{dbname}")
      return true

      rescue
        return false
  end

  # invokes git to pull changed files for upload to basex
  def loadChanges
     dbname = getDatabaseNameForBranch(@branch)

     changes = `git diff #{@from} #{@to} --name-only --diff-filter=AM`

     changes.split(/\n/).each do |path|
        puts "Added or modified file: \"#{path}\""
        if not path =~ /.+\.(xml|dita|ditamap|ditaval)$/
           puts "Skipping non-XML file"
           next
        end

        #bytes = `git cat-file blob #{@to}:#{path}`
        # puts "bytes=/#{bytes}/"
        #@basex.add(path, "#{bytes}")
        cmd = "check #{dbname}"
        @basex.execute(cmd)
        #addOrReplaceFile(dbname, path, bytes)
        addOrReplaceFile(dbname, path)

     end

     # Do deletions:
     changes = `git diff #{@from} #{@to} --name-only --diff-filter=D`

     changes.split(/\n/).each do |path|
        puts "Deleted file: \"#{path}\""
        @basex.execute("delete \"#{path}\"")
        # puts "#{@basex.info()}"
     end
  end

  # @param dbname [String] name of DB in which file is to be saved
  # @param path [String] path of file
  # @param bytes [String] file content, should be XML format; when file is of
  # => non-trivial size (i.e. not metadata), this argument is optional; basex
  # => server will pull file from its end to avoid blocking this script
  def addOrReplaceFile(dbname, path, bytes=nil)
      #puts "addOrReplaceFile(): path=\"#{path}\""
      #puts "                    dbname=\"#{dbname}\""
      path.tr(' ', '%20')
      fileUri = @basex.execute("xquery for $doc in db:open(\"#{dbname}\", \"#{path}\") return document-uri($doc)")
      #puts "   query status=#{@basex.info()}"
      #puts "fileUri=#{fileUri}"
      if fileUri != ""
         puts "  File exists in database, deleting..."
         @basex.execute("delete \"#{path}\"")
         # puts "  #{@basex.info()}"
      end

      # byte should only be non-nil when it holds metadata;
      # for content files, BaseX server receives path and @to commit hash
      # to pull file from its end
      if bytes
        puts "   Adding file \"#{path}\" to database #{dbname}..."
        cmd = "add to \"#{path}\" #{bytes}"
        @basex.execute(cmd)
        puts "   #{@basex.info()}"
      else
        puts "Posting changed file #{path} "
        `curl -X POST -d "dbName='#{dbName}'&path='#{path}'" localhost:8984/update`
      end

      rescue RuntimeError
        puts "[WARN] Runtime error doing BaseX command \"#{cmd}\""
  end

  def recordGitStateDetails
     puts "Recording git state details"
     metaDbName = getDatabaseNameForBranch(@branch)
     xmlData=<<-EOS
<?xml version="1.0" encoding="UTF-8"?>
<d4st_metadata>
  <gitstate>
    <repodir>{unset}</repodir>
    <repo>#{@repoName}</repo>
    <branch>#{@branch}</branch>
    <commit>#{@to}</commit>
  </gitstate>
</d4st_metadata>
     EOS
     cmd = "check #{metaDbName}"
     @basex.execute(cmd)
     addOrReplaceFile(metaDbName, "_d4st/metadata.xml", xmlData)

     rescue RuntimeError
        puts "[WARN] Runtime error doing BaseX command \"#{cmd}\""

  end

# TODO assess method performance if offshoring #loadChanges is not sufficient
  def updateIndexes
     dbName = getDatabaseNameForBranch(@branch)

     cmd = "open #{dbName}"
     @basex.execute(cmd)
     puts "*** Updating fulltext index for database #{dbName}"
     @basex.execute("create index fulltext")

  end


  def update()
     puts "Updating using #{@from}, #{@to}, #{@branch}"
     ensureMetadataDatabase
     recordGitStateDetails
     loadChanges
     updateIndexes
  end
end

def getRepoName
  # Note that the script is run from the repo directory,
  # not, the custom_scripts directory.
  parts = `pwd -L`.chomp.split('/')
  puts "getRepoName(): parts=#{parts}"
  repoName = parts[parts.length - 1]
  puts "[1] repoName=#{repoName}"
  repoName.sub!(".git", "")
  puts "[2] repoName=#{repoName}"
  return repoName
end

puts "Running post-receive..."

STDIN.each do |line|
   # puts "line=/#{line.chomp}/"
   from, to, branch, = line.chomp.split(/\s+/)

   #puts "from=#{from}"
   #puts "to=#{to}"
   #puts "branch=#{branch}"
   updater = Updater.new(from, to, branch, getRepoName())
   updater.update()

end

puts "Post-receive done."
